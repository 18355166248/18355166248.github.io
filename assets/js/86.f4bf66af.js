(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{473:function(n,t,e){"use strict";e.r(t);var r=e(45),s=Object(r.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_47-全排列-ii"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_47-全排列-ii"}},[n._v("#")]),n._v(" 47. 全排列 II")]),n._v(" "),e("p",[n._v("// 给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。\n// [[1,1,2],\n//  [1,2,1],\n//  [2,1,1]]\nvar permuteUnique = function(nums) {\nconst length = nums.length;\nnums = nums.sort((a, b) => a - b);\nconst obj = {};\nconst totalArr = [];\nfunction dfs(arr) {\nif (arr.length === length) return totalArr.push(arr);\nfor (let i = 0; i < length; i++) {\nif (obj[i]) continue;\n// 不好理解\nif (i > 0 && nums[i - 1] === nums[i] && !obj[i - 1]) continue;")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("  obj[i] = true;\n  dfs([...arr, nums[i]], i);\n  obj[i] = false;\n}\n")])])]),e("p",[n._v("}")]),n._v(" "),e("p",[n._v('dfs("");')]),n._v(" "),e("p",[n._v("return totalArr;\n};\nconsole.log(permuteUnique([1, 1, 2]));\nconsole.log(permuteUnique([3, 3, 0, 3]));")])])}),[],!1,null,null,null);t.default=s.exports}}]);