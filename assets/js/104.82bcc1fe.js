(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{489:function(n,t,a){"use strict";a.r(t);var r=a(45),e=Object(r.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_74-搜索二维矩阵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_74-搜索二维矩阵"}},[n._v("#")]),n._v(" 74. 搜索二维矩阵")]),n._v(" "),a("p",[n._v("// 编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：\n// 每行中的整数从左到右按升序排列。\n// 每行的第一个整数大于前一行的最后一个整数。\nvar searchMatrix = function(matrix, target) {\nconst m = matrix.length,\nn = matrix[0].length;\nlet is = true, // 表示是否从左到右升序并且每行的第一个整数大于前一行的最后一个整数。\nhas = false; // 表示target是否存在\nfor (let i = 0; i < m; i++) {\n// 外层循环, 判断每行的第一个整数大于前一行的最后一个整数。\nif (i > 0 && matrix[i][0] < matrix[i - 1][n - 1]) {\nis = false;\nbreak;\n}")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 判断内层数组长度是否大于1, 如果不大于一, 则不需要判断升序, 只需要判断target是否存在即可\n// 如果大于一, 则需要判断是否是升序, 同时也要判断是否存在target\nif (n > 1) {\n  for (let j = 0; j < n - 1; j++) {\n    if (matrix[i][j] > matrix[i][j + 1]) {\n      is = false;\n      break;\n    }\n    if (!has) {\n      has = matrix[i][j] === target;\n      if (j === n - 2 && !has) has = matrix[i][j + 1] === target;\n    }\n  }\n} else {\n  if (!has) {\n    has = matrix[i][0] === target;\n  }\n}\n")])])]),a("p",[n._v("}")]),n._v(" "),a("p",[n._v("return is && has;\n};\n// console.log(\n//   searchMatrix(\n//     [\n//       [1, 3, 5, 7],\n//       [10, 11, 16, 20],\n//       [23, 30, 34, 60],\n//     ],\n//     3\n//   )\n// ); // true\n// console.log(\n//   searchMatrix(\n//       [\n//         [1, 3, 5, 7],\n//         [10, 11, 16, 20],\n//         [23, 30, 34, 60],\n//       ],\n//     ,\n//     13\n//   )\n// ); // true\nconsole.log(searchMatrix([[1]], 1)); // true\nconsole.log(searchMatrix([[1, 3]], 1)); // true\nconsole.log(searchMatrix([[1, 3, 5]], 5)); // true")])])}),[],!1,null,null,null);t.default=e.exports}}]);