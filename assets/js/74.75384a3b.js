(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{459:function(n,t,e){"use strict";e.r(t);var s=e(45),r=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_33-搜索旋转排序数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_33-搜索旋转排序数组"}},[n._v("#")]),n._v(" 33. 搜索旋转排序数组")]),n._v(" "),e("p",[n._v("// 整数数组 nums 按升序排列，数组中的值 互不相同 。\n// 在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。\n// 给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。\nvar search = function(nums, target) {\nlet start = 0,\nend = nums.length - 1;\nwhile (start <= end) {\nconst mid = start + Math.floor(end - start / 2);")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("if (nums[mid] === target) return mid;\n\nif (nums[mid] >= nums[start]) {\n  // 左侧是有序\n  if (target >= nums[start] && target < nums[mid]) {\n    // target在左侧\n    end = mid - 1;\n  } else {\n    // target在右侧\n    start = mid + 1;\n  }\n} else {\n  // 右侧是有序\n  if (target > nums[mid] && target < nums[end]) {\n    // target在右侧\n    left = mid + 1;\n  } else {\n    // target在左侧\n    end = mid - 1;\n  }\n}\n")])])]),e("p",[n._v("}")]),n._v(" "),e("p",[n._v("return -1;\n};")]),n._v(" "),e("p",[n._v("console.log(search([4, 5, 6, 7, 0, 1, 2], 0));")])])}),[],!1,null,null,null);t.default=r.exports}}]);