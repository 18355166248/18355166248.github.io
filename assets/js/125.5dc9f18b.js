(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{509:function(t,n,e){"use strict";e.r(n);var o=e(45),r=Object(o.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_993-二叉树的堂兄弟节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_993-二叉树的堂兄弟节点"}},[t._v("#")]),t._v(" 993. 二叉树的堂兄弟节点")]),t._v(" "),e("p",[t._v("// 在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。\n// 如果二叉树的两个节点深度相同，但 父节点不同 ，则它们是一对堂兄弟节点。\n// 我们给出了具有唯一值的二叉树的根节点 root ，以及树中两个不同节点的值 x 和 y 。\n// 只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true 。否则，返回 false。\nvar isCousins = function(root, x, y) {\n// 边界处理\nif (!root.left && !root.right) return false;\n// 存储匹配到x和y结果的存储的数据,包括层级depth和父集parent\nlet leftDepth = {},\nrightDepth = {};")]),t._v(" "),e("p",[t._v("getDepth(root.left, { depth: 0, parent: root });\ngetDepth(root.right, { depth: 0, parent: root });")]),t._v(" "),e("p",[t._v("// 递归判断val值和x,y是否相等确定层级和父集\nfunction getDepth(params, config) {\nif (!params) return;\nif (params.val === x) {\nleftDepth = config;\n} else if (params.val === y) {\nrightDepth = config;\n} else {\ngetDepth(params.left, { depth: config.depth + 1, parent: params });\ngetDepth(params.right, { depth: config.depth + 1, parent: params });\n}\n}")]),t._v(" "),e("p",[t._v("return (\nleftDepth.depth > 0 &&\nleftDepth.depth === rightDepth.depth &&\nleftDepth.parent.val !== rightDepth.parent.val\n);\n};")]),t._v(" "),e("p",[t._v("const root = { val: 1, left: { val: 2, left: { val: 4 } }, right: { val: 3 } },\nx = 4,\ny = 3;\nconst root1 = {\nval: 1,\nleft: {\nval: 2,\nright: { val: 4 },\n},\nright: {\nval: 3,\nright: { val: 5 },\n},\n},\nx1 = 5,\ny1 = 4;")]),t._v(" "),e("p",[t._v("const root2 = {\nval: 1,\nleft: { val: 2, right: { val: 4 } },\nright: { val: 3 },\n},\nx2 = 2,\ny2 = 3;")]),t._v(" "),e("p",[t._v("const root3 = {\nval: 1,\nleft: { val: 2 },\nright: { val: 3, left: { val: 4 }, right: { val: 5 } },\n},\nx3 = 4,\ny3 = 5;")]),t._v(" "),e("p",[t._v("console.log(isCousins(root, x, y)); // false\nconsole.log(isCousins(root1, x1, y1)); // true\nconsole.log(isCousins(root2, x2, y2)); // false\nconsole.log(isCousins(root3, x3, y3)); // false")])])}),[],!1,null,null,null);n.default=r.exports}}]);