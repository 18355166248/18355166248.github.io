(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{424:function(n,t,e){"use strict";e.r(t);var r=e(45),o=Object(r.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_100-相同的树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_100-相同的树"}},[n._v("#")]),n._v(" 100. 相同的树")]),n._v(" "),e("p",[n._v("function TreeNode(val, left, right) {\nthis.val = val === undefined ? 0 : val;\nthis.left = left === undefined ? null : left;\nthis.right = right === undefined ? null : right;\n}\nvar isSameTree = function(p, q) {\nlet isSame = true;\nfunction inorder(root1, root2) {\nif (!root1 && !root2) return;\nif (!isSame) return;\nif (!root1) return (isSame = false);\nif (!root2) return (isSame = false);\nif (root1.val !== root2.val) return (isSame = false);\ninorder(root1.left, root2.left);\ninorder(root1.right, root2.right);\n}\ninorder(p, q);")]),n._v(" "),e("p",[n._v("return isSame;\n};")]),n._v(" "),e("p",[n._v("const p = {\nval: 1,\nleft: {\nval: 2,\n},\nright: {\nval: 3,\n},\n};")]),n._v(" "),e("p",[n._v("const q = {\nval: 1,\nleft: {\nval: 2,\n},\nright: {\nval: 3,\n},\n};\nconsole.log(isSameTree(p, q));")]),n._v(" "),e("p",[n._v("const p1 = {\nval: 1,\nleft: {\nval: 1,\n},\n};")]),n._v(" "),e("p",[n._v("const q1 = {\nval: 1,\nright: {\nval: 1,\n},\n};\nconsole.log(isSameTree(p1, q1));")])])}),[],!1,null,null,null);t.default=o.exports}}]);