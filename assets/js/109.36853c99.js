(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{492:function(n,e,t){"use strict";t.r(e);var r=t(45),o=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_79-单词搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_79-单词搜索"}},[n._v("#")]),n._v(" 79. 单词搜索")]),n._v(" "),t("p",[n._v("// 给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。\n// 单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。\nvar exist = function(board, word) {\nconst column = board.length,\nrow = board[0].length;\nconst directions = [\n[0, 1],\n[0, -1],\n[1, 0],\n[-1, 0],\n];\nconst enumObj = {};\nconst check = (i, j, k) => {\nif (board[i][j] !== word.charAt(k)) return false;\nelse if (k === word.length - 1) return true;")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('enumObj["" + i + j] = true;\nlet result = false;\n\nfor (const [x, y] of directions) {\n  const newI = i + x,\n    newJ = j + y;\n  if (newI >= 0 && newI < column && newJ >= 0 && newJ < row) {\n    if (!enumObj["" + newI + newJ]) {\n      const flag = check(newI, newJ, k + 1);\n      if (flag) {\n        result = true;\n        break;\n      }\n    }\n  }\n}\nenumObj["" + i + j] = false;\nreturn result;\n')])])]),t("p",[n._v("};")]),n._v(" "),t("p",[n._v("for (let i = 0; i < column; i++) {\nfor (let j = 0; j < row; j++) {\nconst flag = check(i, j, 0);\nif (flag) {\nreturn true;\n}\n}\n}")]),n._v(" "),t("p",[n._v('return false;\n};\nconsole.log(\nexist(\n[\n["A", "B", "C", "E"],\n["S", "F", "C", "S"],\n["A", "D", "E", "E"],\n],\n"ABCCED"\n)\n); // true')])])}),[],!1,null,null,null);e.default=o.exports}}]);