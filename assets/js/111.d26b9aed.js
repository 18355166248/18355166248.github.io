(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{494:function(n,s,e){"use strict";e.r(s);var t=e(45),i=Object(t.a)({},(function(){var n=this.$createElement,s=this._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h1",{attrs:{id:"_80-删除有序数组中的重复项-ii"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_80-删除有序数组中的重复项-ii"}},[this._v("#")]),this._v(" 80. 删除有序数组中的重复项 II")]),this._v(" "),s("p",[this._v("// 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。")]),this._v(" "),s("p",[this._v("// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。\nvar removeDuplicates = function(nums) {\nconst enumsObj = {};\nfor (let i = nums.length; i >= 0; i--) {\nif (enumsObj[nums[i]]) {\nif (enumsObj[nums[i]] === 2) {\nnums.splice(i, 1);\n} else {\nenumsObj[nums[i]] += 1;\n}\n} else {\nenumsObj[nums[i]] = 1;\n}\n}\nreturn nums.length;\n};\nconsole.log(removeDuplicates([1, 1, 1, 2, 2, 3]));\nconsole.log(removeDuplicates([0, 0, 1, 1, 1, 1, 2, 3, 3])); // 7 [0,0,1,1,2,3,3]")])])}),[],!1,null,null,null);s.default=i.exports}}]);