(window.webpackJsonp=window.webpackJsonp||[]).push([[406],{743:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"源码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码解析"}},[t._v("#")]),t._v(" 源码解析")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90"}},[t._v("源码解析")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97"}},[t._v("算法之位运算")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%B8%B8%E7%94%A8%E7%AC%A6%E5%8F%B7%E8%A7%A3%E9%87%8A"}},[t._v("常用符号解释")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BD%8D%E8%BF%90%E7%AE%97"}},[t._v("位运算")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%BD%8D%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6"}},[t._v("位逻辑运算符")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6"}},[t._v("移位运算符")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"}},[t._v("基本使用")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%BD%8D%E6%8E%A9%E7%A0%81"}},[t._v("位掩码:")])])])])])])])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/18355166248/my-debug-react18",target:"_blank",rel:"noopener noreferrer"}},[t._v("调试仓库"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"算法之位运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法之位运算"}},[t._v("#")]),t._v(" 算法之位运算")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN官方运算文档"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"常用符号解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用符号解释"}},[t._v("#")]),t._v(" 常用符号解释")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("“<<”运算符\n“<<”运算符执行左移位运算。在移位运算过程中，符号位始终保持不变。如果右侧空出位置，则自动填充为 0；超出 32 位的值，则自动丢弃。")]),t._v(" "),s("p",[t._v("把数字 5 向左移动 2 位，则返回值为 20。\nconsole.log(5 << 2); // 返回值 20")])]),t._v(" "),s("li",[s("p",[t._v("“>>”运算符\n“>>”运算符执行有符号右移位运算。与左移运算操作相反，它把 32 位数字中的所有有效位整体右移，再使用符号位的值填充空位。移动过程中超出的值将被丢弃。")]),t._v(" "),s("p",[t._v("把数值 1000 向右移 8 位，则返回值为 3。\n纯文本复制\nconsole.log(1000 >> 8); //返回值 3")])]),t._v(" "),s("li",[s("p",[t._v("“>>>”运算符\n“>>>”运算符执行无符号右移位运算。它把无符号的 32 位整数所有数位整体右移。对于无符号数或正数右移运算，无符号右移与有符号右移运算的结果是相同的。")]),t._v(" "),s("p",[t._v("下面两行表达式的返回值是相同的。\nconsole.log(1000 >> 8); //返回值 3\nconsole.log(1000 >> 8); //返回值 3")]),t._v(" "),s("p",[t._v("对于负数来说，无符号右移将使用 0 来填充所有的空位，同时会把负数作为正数来处理，所得结果会非常大所以，使用无符号右移运算符时要特别小心，避免意外错误。\nconsole.log(-1000 >> 8); //返回值 -4\nconsole.log(-1000 >>> 8); //返回值 16777212")])])]),t._v(" "),s("h3",{attrs:{id:"位运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[t._v("#")]),t._v(" 位运算")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Operator")]),t._v(" "),s("th",[t._v("Usage")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("按位与 AND (en-US)")]),t._v(" "),s("td",[t._v("a & b")]),t._v(" "),s("td",[t._v("在 a,b 的位表示中，每一个对应的位都为 1 则返回 1，否则返回 0.")])]),t._v(" "),s("tr",[s("td",[t._v("按位或 OR (en-US)")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("b")])]),t._v(" "),s("tr",[s("td",[t._v("按位异或 XOR (en-US)")]),t._v(" "),s("td",[t._v("a ^ b")]),t._v(" "),s("td",[t._v("在 a,b 的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0.")])]),t._v(" "),s("tr",[s("td",[t._v("按位非 NOT (en-US)")]),t._v(" "),s("td",[t._v("~ a")]),t._v(" "),s("td",[t._v("反转被操作数的位。")])]),t._v(" "),s("tr",[s("td",[t._v("左移 shift (en-US)")]),t._v(" "),s("td",[t._v("a << b")]),t._v(" "),s("td",[t._v("将 a 的二进制串向左移动 b 位，右边移入 0.")])]),t._v(" "),s("tr",[s("td",[t._v("算术右移")]),t._v(" "),s("td",[t._v("a >> b")]),t._v(" "),s("td",[t._v("把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位。(译注：算术右移左边空出的位是根据最高位是 0 和 1 来进行填充的)")])]),t._v(" "),s("tr",[s("td",[t._v("无符号右移 (左边空出位用 0 填充)")]),t._v(" "),s("td",[t._v("a >>> b")]),t._v(" "),s("td",[t._v("把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位，并把左边空出的位都填充为 0")])])])]),t._v(" "),s("h4",{attrs:{id:"位逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位逻辑运算符"}},[t._v("#")]),t._v(" 位逻辑运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("表达式")]),t._v(" "),s("th",[t._v("结果")]),t._v(" "),s("th",[t._v("二进制描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("15 & 9")]),t._v(" "),s("td",[t._v("9")]),t._v(" "),s("td",[t._v("1111 & 1001 = 1001")])]),t._v(" "),s("tr",[s("td",[t._v("15")]),t._v(" "),s("td",[t._v("9")]),t._v(" "),s("td",[t._v("15")])]),t._v(" "),s("tr",[s("td",[t._v("15 ^ 9")]),t._v(" "),s("td",[t._v("6")]),t._v(" "),s("td",[t._v("1111 ^ 1001 = 0110")])]),t._v(" "),s("tr",[s("td",[t._v("~15")]),t._v(" "),s("td",[t._v("-16")]),t._v(" "),s("td",[t._v("~ 0000 0000 … 0000 1111 = 1111 1111 … 1111 0000")])]),t._v(" "),s("tr",[s("td",[t._v("~9")]),t._v(" "),s("td",[t._v("-10")]),t._v(" "),s("td",[t._v("~ 0000 0000 … 0000 1001 = 1111 1111 … 1111 0110")])])])]),t._v(" "),s("h4",{attrs:{id:"移位运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移位运算符"}},[t._v("#")]),t._v(" 移位运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("运算符")]),t._v(" "),s("th",[t._v("描述")]),t._v(" "),s("th",[t._v("范例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("<< (左移位)")]),t._v(" "),s("td",[t._v("将第一个操作数向左移动指定数量的位。左边移出位被抛弃。左边移出的几位被丢弃。右边多出的空位由 0 补齐")]),t._v(" "),s("td",[t._v("9<<2 产生 36，因为 1001 移位 2 比特向左变为 100100，它是 36。")])]),t._v(" "),s("tr",[s("td",[t._v(">> (带符号右移)")]),t._v(" "),s("td",[t._v("将第一个操作数向右移动指定数量的位。右边移出位被抛弃。左边多出的空位由原值的最左边数字补齐。")]),t._v(" "),s("td",[t._v("9>>2 产生 2，因为 1001 移位 2 位向右变为 10，其是 2。同样，-9>>2 产生 -3，由于符号被保留。")])]),t._v(" "),s("tr",[s("td",[t._v(">>> (补零右移)")]),t._v(" "),s("td",[t._v("将第一个操作数向右移动指定数量的位。右边移出位被抛弃。左边多出的空位由 0 补齐。")]),t._v(" "),s("td",[t._v("19>>>2产生 4，因为 10011 移位 2 位向右变为 100，它是 4。对非负数值，补零右移和带符号右移产生相同结果。")])])])]),t._v(" "),s("h3",{attrs:{id:"基本使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本使用"}},[t._v("#")]),t._v(" 基本使用")]),t._v(" "),s("h4",{attrs:{id:"位掩码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位掩码"}},[t._v("#")]),t._v(" 位掩码:")]),t._v(" "),s("p",[t._v("通过位移定义的一组枚举常量, 可以利用位掩码的特性, 快速操作这些枚举产量(增加, 删除, 比较).")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("属性增加|\nABC = A | B | C")])]),t._v(" "),s("li",[s("p",[t._v("属性删除& ~\nAB = ABC & ~C")])]),t._v(" "),s("li",[s("p",[t._v("属性比较\nAB 当中包含 B: AB & B === B\nAB 当中不包含 C: AB & C === 0\nA 和 B 相等: A === B")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0b00000001")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0b00000010")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0b00000100")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 增加属性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ABC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0b00000111")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除属性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ABC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0b00000011")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 属性比较")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. AB当中包含B")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. AB当中不包含C")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AB")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. A和B相等")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);