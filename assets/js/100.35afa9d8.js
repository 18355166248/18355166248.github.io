(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{485:function(n,t,e){"use strict";e.r(t);var i=e(45),r=Object(i.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_64-最小路径和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_64-最小路径和"}},[n._v("#")]),n._v(" 64. 最小路径和")]),n._v(" "),e("p",[n._v("// 给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n// 说明：每次只能向下或者向右移动一步。\nvar minPathSum = function(grid) {\nconst end1 = grid.length,\nend2 = grid[0].length;\nconst dp = Array.from({ length: end1 }, (_) => Array(end2).fill(0));")]),n._v(" "),e("p",[n._v("dp[0][0] = grid[0][0];")]),n._v(" "),e("p",[n._v("for (let i = 1; i < end1; i++) {\ndp[i][0] = grid[i][0] + dp[i - 1][0];\n}\nfor (let j = 1; j < end2; j++) {\ndp[0][j] = grid[0][j] + dp[0][j - 1];\n}")]),n._v(" "),e("p",[n._v("for (let i = 1; i < end1; i++) {\nfor (let j = 1; j < end2; j++) {\ndp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n}\n}\nreturn dp[end1 - 1][end2 - 1];\n};\nconsole.log(\nminPathSum([\n[1, 3, 1],\n[1, 5, 1],\n[4, 2, 1],\n])\n); // 7\nconsole.log(\nminPathSum([\n[1, 2, 3],\n[4, 5, 6],\n])\n); // 12")])])}),[],!1,null,null,null);t.default=r.exports}}]);