(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{495:function(n,s,t){"use strict";t.r(s);var e=t(45),r=Object(e.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_78-子集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_78-子集"}},[n._v("#")]),n._v(" 78. 子集")]),n._v(" "),t("p",[n._v("// 给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。")]),n._v(" "),t("p",[n._v("// 解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。")]),n._v(" "),t("p",[n._v("// 示例 1：\n// 输入：nums = [1,2,3]\n// 输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]")]),n._v(" "),t("p",[n._v("// 示例 2：\n// 输入：nums = [0]\n// 输出：[[],[0]]")]),n._v(" "),t("p",[n._v("var subsets = function(nums) {\nconst arr = [];")]),n._v(" "),t("p",[n._v("function deps(index, list) {\nif (index === nums.length) {\narr.push(list.slice());\nreturn;\n}")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('list.push(nums[index]);\n// console.log("before", list);\ndeps(index + 1, list);\nconsole.log("after", list);\nlist.pop();\ndeps(index + 1, list);\n')])])]),t("p",[n._v("}")]),n._v(" "),t("p",[n._v("deps(0, []);")]),n._v(" "),t("p",[n._v("return arr;\n};")]),n._v(" "),t("p",[n._v("const arr = [1, 2, 3];\nsubsets(arr);\n// console.log(subsets(arr));")])])}),[],!1,null,null,null);s.default=r.exports}}]);