(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{497:function(n,t,e){"use strict";e.r(t);var s=e(45),r=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_81-搜索旋转排序数组-ii"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_81-搜索旋转排序数组-ii"}},[n._v("#")]),n._v(" 81. 搜索旋转排序数组 II")]),n._v(" "),e("p",[n._v("// 已知存在一个按非降序排列的整数数组 nums ，数组中的值不必互不相同。\n// 在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了 旋转 ，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,4,4,5,6,6,7] 在下标 5 处经旋转后可能变为 [4,5,6,6,7,0,1,2,4,4] 。\n// 给你 旋转后 的数组 nums 和一个整数 target ，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 nums 中存在这个目标值 target ，则返回 true ，否则返回 false 。\nvar search = function(nums, target) {\nlet left = 0,\nright = nums.length - 1;")]),n._v(" "),e("p",[n._v("while (left <= right) {\nif (nums[left++] === target) return true;\nif (nums[right--] === target) return true;\n}")]),n._v(" "),e("p",[n._v("return false;\n};\nconsole.log(search([2, 5, 6, 0, 0, 1, 2], 0));\nconsole.log(search([2, 5, 6, 0, 0, 1, 2], 3));\nconsole.log(search([2, 2, 2, 3, 2, 2, 2], 3));\nconsole.log(search([1], 1));")])])}),[],!1,null,null,null);t.default=r.exports}}]);