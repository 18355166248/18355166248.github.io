(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{606:function(t,a,s){"use strict";s.r(a);var r=s(45),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"网络-network"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络-network"}},[t._v("#")]),t._v(" 网络 Network")]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#目录"}},[t._v("目录")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-怎么做-tcp-的流量控制"}},[t._v("1. 怎么做 tcp 的流量控制？")])]),s("li",[s("a",{attrs:{href:"#_2-怎么做-tcp-拥塞控制"}},[t._v("2. 怎么做 tcp 拥塞控制？")]),s("ul",[s("li",[s("a",{attrs:{href:"#拥塞控制四个算法"}},[t._v("拥塞控制四个算法")])])])]),s("li",[s("a",{attrs:{href:"#_3-流量控制和拥塞控制的区别"}},[t._v("3. 流量控制和拥塞控制的区别")])])])])])]),s("p"),t._v(" "),s("h3",{attrs:{id:"_1-怎么做-tcp-的流量控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-怎么做-tcp-的流量控制"}},[t._v("#")]),t._v(" 1. 怎么做 tcp 的流量控制？")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看实现代码")]),t._v(" "),s("p",[t._v("利用滑动窗口的流量控制")]),t._v(" "),s("p",[t._v("一般来说，我们总希望数据传输的更快一些。但如果发送方把数据发得过快，接收方就可能来不及接收，这就会造成数据的丢失。流量控制（flow control）就是让发送方的发送速率不要太快，要让接收方来得及接收。\n   利用滑动窗口机制可以很方便地在 TCP 连接上实现发送方流量控制。通过接收方的确认报文中的窗口字段，发送方能够准确地控制发送字节数。")])]),t._v(" "),s("h3",{attrs:{id:"_2-怎么做-tcp-拥塞控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-怎么做-tcp-拥塞控制"}},[t._v("#")]),t._v(" 2. 怎么做 tcp 拥塞控制？")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看实现代码")]),t._v(" "),s("p",[t._v("前面的流量控制是避免发送方的数据填满接收方的缓存，但并不知道网络中发生了什么。一般来说，计算机网络都处在一个共享的环境。因此也有可能会因为其他主机之间的通信使得网络拥堵。在网络出现拥堵时，如果继续发送大量的数据包，可能会导致数据包时延、丢失，这时 TCP 就会重传数据，但是⼀重传就会导致⽹络的负担更重，于是会导致更⼤的延迟以及更多的丢包，这个情况就会进⼊恶性循环被不断地放⼤…\n   于是，就有了拥塞控制，控制的⽬的就是避免「发送⽅」的数据填满整个⽹络。为了在「发送⽅」调节所要发送数据的数据量，定义了⼀个叫做「拥塞窗⼝」的概念。拥塞窗⼝ cwnd 是发送⽅维护的⼀个的状态变 ᰁ，它会根据⽹络的拥塞程度动态变化的。")]),t._v(" "),s("p",[t._v("只要⽹络中没有出现拥塞， cwnd 就会增⼤；\n但⽹络中出现了拥塞， cwnd 就减少；")])]),t._v(" "),s("h4",{attrs:{id:"拥塞控制四个算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制四个算法"}},[t._v("#")]),t._v(" 拥塞控制四个算法")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看实现代码")]),t._v(" "),s("ul",[s("li",[t._v("慢启动（slow-start）")]),t._v(" "),s("li",[t._v("拥塞避免（congestion avoidance）")]),t._v(" "),s("li",[t._v("快重传（fast retransmit）")]),t._v(" "),s("li",[t._v("快恢复（fast recovery）")])])]),t._v(" "),s("h3",{attrs:{id:"_3-流量控制和拥塞控制的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-流量控制和拥塞控制的区别"}},[t._v("#")]),t._v(" 3. 流量控制和拥塞控制的区别")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看实现代码")]),t._v(" "),s("p",[t._v("拥塞控制：拥塞控制是作用于网络的，它是防止过多的数据注入到网络中，避免出现网络负载过大的情况；常用的方法就是：（ 1 ）慢开始、拥塞避免（ 2 ）快重传、快恢复。")]),t._v(" "),s("p",[t._v("流量控制：流量控制是作用于接收者的，它是控制发送者的发送速度从而使接收者来得及接收，防止分组丢失的。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);