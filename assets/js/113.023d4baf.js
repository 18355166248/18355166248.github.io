(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{498:function(n,e,t){"use strict";t.r(e);var l=t(45),a=Object(l.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_82-删除排序链表中的重复元素-ii"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_82-删除排序链表中的重复元素-ii"}},[n._v("#")]),n._v(" 82. 删除排序链表中的重复元素 II")]),n._v(" "),t("p",[n._v("// 存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。\n// 返回同样按升序排列的结果链表。\nvar deleteDuplicates = function(head) {\nif (head === null || head.next === null) return head")]),n._v(" "),t("p",[n._v("const obj = {}\nwhile (head) {\nif (obj[head.val]) {\nobj[head.val] += 1\n} else {\nobj[head.val] = 1\n}\nhead = head.next\n}")]),n._v(" "),t("p",[n._v("const prevRes = { next: null }\nlet res = prevRes\nObject.keys(obj)\n.sort((a, b) => +a - b)\n.forEach((key) => {\nif (obj[key] === 1) {\nres.next = { val: key, next: null }\nres = res.next\n}\n})")]),n._v(" "),t("p",[n._v("return prevRes.next\n}\n// console.log(\n//   deleteDuplicates({\n//     val: 1,\n//     next: {\n//       val: 2,\n//       next: {\n//         val: 3,\n//         next: {\n//           val: 3,\n//           next: {\n//             val: 4,\n//             next: {\n//               val: 4,\n//               next: {\n//                 val: 5,\n//               },\n//             },\n//           },\n//         },\n//       },\n//     },\n//   })\n// )")]),n._v(" "),t("p",[n._v("// console.log(\n//   deleteDuplicates({\n//     val: 1,\n//     next: {\n//       val: 1,\n//       next: null,\n//     },\n//   })\n// )")]),n._v(" "),t("p",[n._v("console.log(\ndeleteDuplicates({\nval: -3,\nnext: {\nval: -1,\nnext: {\nval: -1,\nnext: {\nval: 0,\nnext: {\nval: 0,\nnext: {\nval: 0,\nnext: {\nval: 0,\nnext: {\nval: 0,\nnext: {\nval: 2,\nnext: null,\n},\n},\n},\n},\n},\n},\n},\n},\n})\n)")])])}),[],!1,null,null,null);e.default=a.exports}}]);