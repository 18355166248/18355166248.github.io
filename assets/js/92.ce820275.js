(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{476:function(n,e,r){"use strict";r.r(e);var t=r(45),s=Object(t.a)({},(function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h1",{attrs:{id:"_56-合并区间"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_56-合并区间"}},[n._v("#")]),n._v(" 56. 合并区间")]),n._v(" "),r("p",[n._v("// 以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。\nvar merge = function(intervals) {\n// 先对数组排序, 以数组中的第一个值排序\nintervals = intervals.sort((a, b) => a[0] - b[0]);\nconst arr = [intervals[0]];\nfor (let i = 1; i < intervals.length; i++) {\nconst cur = intervals[i];\nconst prev = arr[arr.length - 1];\n// 判断上一个已存在区间和当前区间,当前区间的开始值小于上一个区间的开始值, 取当前区间开始值\nif (cur[0] <= prev[0]) {\nprev[0] = cur[0];\n}")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[n._v("if (prev[1] > cur[1]) {\n  // 上一个区间结束值大于当前区间结束值, 则什么也不做\n} else if (prev[1] >= cur[0]) {\n  // 不满足上一个条件, 上一个区间结束值大于当前开始值, 更新上一个结束值为当前结束值\n  prev[1] = cur[1];\n} else {\n  // 不满足上面2个条件\n  arr.push(cur);\n}\n")])])]),r("p",[n._v("}")]),n._v(" "),r("p",[n._v("return arr;\n};")]),n._v(" "),r("p",[n._v("// console.log(\n//   merge([\n//     [1, 3],\n//     [2, 6],\n//     [8, 10],\n//     [15, 18],\n//   ])\n// ); // [[1,6],[8,10],[15,18]]\n// console.log(\n//   merge([\n//     [1, 4],\n//     [4, 5],\n//   ])\n// ); // [[1,5]]\n// console.log(\n//   merge([\n//     [1, 4],\n//     [0, 4],\n//   ])\n// ); // [0,4]]\n// console.log(\n//   merge([\n//     [1, 4],\n//     [1, 5],\n//   ])\n// ); // [1,5]]\nconsole.log(\nmerge([\n[1, 4],\n[0, 1],\n])\n); // [0,4]]\nconsole.log(\nmerge([\n[1, 4],\n[0, 0],\n])\n); // [[0,0],[1,4]]")])])}),[],!1,null,null,null);e.default=s.exports}}]);