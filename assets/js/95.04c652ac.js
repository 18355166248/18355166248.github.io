(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{479:function(t,i,n){"use strict";n.r(i);var r=n(45),e=Object(r.a)({},(function(){var t=this,i=t.$createElement,n=t._self._c||i;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_59-螺旋矩阵-ii"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_59-螺旋矩阵-ii"}},[t._v("#")]),t._v(" 59. 螺旋矩阵 II")]),t._v(" "),n("p",[t._v("// 给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。\nvar generateMatrix = function(n) {\nconst matrix = Array.from({ length: n }, (_) => Array(n.length).fill());")]),t._v(" "),n("p",[t._v("let left = 0,\ntop = 0,\nright = n - 1,\nbottom = n - 1,\nnum = 1;\nmatrix[0][0] = 1;")]),t._v(" "),n("p",[t._v("while (left < right && top < bottom) {\nfor (let i = left; i < right; i++) matrix[top][i] = num++;\nfor (let i = top; i < bottom; i++) matrix[i][right] = num++;\nfor (let i = right; i > left; i--) matrix[bottom][i] = num++;\nfor (let i = bottom; i > top; i--) matrix[i][left] = num++;")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("left++;\nright--;\ntop++;\nbottom--;\n")])])]),n("p",[t._v("}")]),t._v(" "),n("p",[t._v("if (left === right) {\nfor (let i = top; i <= bottom; i++) matrix[i][left] = num++;\n} else if (top === bottom) {\nfor (let i = left; i <= right; i++) matrix[top][i] = num++;\n}\nreturn matrix;\n};\nconsole.log(generateMatrix(3));")])])}),[],!1,null,null,null);i.default=e.exports}}]);