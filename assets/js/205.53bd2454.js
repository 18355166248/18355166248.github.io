(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{589:function(t,s,e){"use strict";e.r(s);var i=e(45),a=Object(i.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git-常用功能记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-常用功能记录"}},[t._v("#")]),t._v(" Git 常用功能记录")]),t._v(" "),e("h2",{attrs:{id:"git-功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-功能"}},[t._v("#")]),t._v(" git 功能")]),t._v(" "),e("ol",[e("li",[t._v("git reset --soft HEAD^ 撤销 git commit\n"),e("ul",[e("li",[t._v("HEAD^的意思是上一个版本，也可以写成 HEAD~1")]),t._v(" "),e("li",[t._v("如果你进行了 2 次 commit，想都撤回，可以使用 HEAD~2")])])]),t._v(" "),e("li",[t._v("如果想修改 git commit 的注释 git commit --amend")])]),t._v(" "),e("h2",{attrs:{id:"git-远程地址操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-远程地址操作"}},[t._v("#")]),t._v(" git 远程地址操作")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("git remote add origin git@github.com:nanfei9330/learngit.git")])]),t._v(" "),e("li",[e("p",[t._v("git push -u origin master")]),t._v(" "),e("ul",[e("li",[t._v("第一次使用加上了-u 参数，是推送内容并关联分支。")]),t._v(" "),e("li",[t._v("推送成功后就可以看到远程和本地的内容一模一样，下次只要本地作了提交，就可以通过命令：git push origin master")])])]),t._v(" "),e("li",[e("p",[t._v("git remote update origin -p 更新本地远程分支列表")])])]),t._v(" "),e("h2",{attrs:{id:"多人协作开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多人协作开发"}},[t._v("#")]),t._v(" 多人协作开发")]),t._v(" "),e("ol",[e("li",[t._v("首先将项目 form 到个人仓库")]),t._v(" "),e("li",[t._v("配置本地项目的 git 仓库地址， 按如下设置")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git remote set-url origin <主仓库地址>\n$ git remote set-url --push origin <自己的 fork 仓库地址>\n$ git remote -v  #查看 fetch的地址\n#origin <主仓库地址> (fetch)\n#origin <自己的 fork 仓库地址> (push)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),e("ol",[e("li",[t._v("git 克隆远程指定分支 git clone -b <指定分支名> <远程仓库地址>")])]),t._v(" "),e("h2",{attrs:{id:"git-pull-代码的时候默认使用-rebase-而不是-merge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-pull-代码的时候默认使用-rebase-而不是-merge"}},[t._v("#")]),t._v(" git pull 代码的时候默认使用 rebase 而不是 merge")]),t._v(" "),e("p",[t._v("git pull 实际会有两个操作，一个是 git fetch，另外一个是 git merge。一般 merge 的情况下会产生一个新的提交名字为 Merge branch ****，如下图所示：")]),t._v(" "),e("p",[t._v("这个新的提交会导致提交记录中产生多余的提交信息，实际与解决问题相关的提交不符而且对于一些洁癖来说这种难以接受，所以 git 提供了一个 rebase 的方式来替代 merge，rebase 可以按顺序结构重新整合提交顺序而不是产生一个新的提交。具体的区别大家可到网络上搜索一下这里重点不是介绍他们两个的区别。")]),t._v(" "),e("p",[t._v("而如果你希望每次拉代码的时候不需要执行 git fetch 后再执行一次 git rebase，而是像以前一样直接执行 git pull 而是使用 rebase 来合并代码的话，那以下命令可以帮到你。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("git config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global pull"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rebase "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("执行次命令后，每次 git pull 都将是一个 git fetch + git rebase 的过程了，而不是以前的那种方式。")]),t._v(" "),e("h2",{attrs:{id:"github-contributions-没有绿色显示提交问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-contributions-没有绿色显示提交问题"}},[t._v("#")]),t._v(" GitHub contributions 没有绿色显示提交问题")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("Issues 和 pull requests\n这个操作是在一年之内\n这个操作是针对一个独立的仓库，不能是 fork")])]),t._v(" "),e("li",[e("p",[t._v("Commits\n当你的 commits 满足以下条件时，它才会被展示出来：")]),t._v(" "),e("p",[t._v("一年之内提交的 commits\ncommits 使用的 email 地址是与你的 Github 账号相关联的\n这些 commits 是在一个独立的仓库而不是 fork 仓库\n这些 commits 是在：\n在默认分支上（通常是 master）\n在 gh-pages 分支(包含 Project Pages sites 的仓库)\n此外，至少满足下面条件中的一个（主要针对你 Commit 的仓库不是你创建的）：")]),t._v(" "),e("p",[t._v("你是这个仓库的协作者，或者是这个版本库的拥有组织中的一员\n你 fork 过这个仓库\n你对这个仓库发起过 pull request 或者 issue\n你对这个仓库标记了 Star\n　　注意：私有库的贡献仅仅对私有库成员显示")])]),t._v(" "),e("li",[e("p",[t._v("Contributions 未被 Github 计入的几个常见原因\n进行 Commits 的用户没有被关联到你的 Github 帐号中。\n不是在这个版本库的默认分支进行的 Commit。\n这个仓库是一个 Fork 仓库，而不是独立仓库。")])]),t._v(" "),e("li",[e("p",[t._v("git config user.email\n你的 git config user.email 需要是账号绑定的\n可能会存在绑定了还是不显示的情况\n我这边有 2 个方法:")]),t._v(" "),e("ol",[e("li",[t._v("在项目的根目录 进入.git/config 下 添加")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[user]\n   user.name = '名字'\n   user.email = '邮箱'\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("这样的话是可以的")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("再次设置全局的配置")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config --global user.name = '名字'\ngit config --global user.email = '邮箱'\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("然后你再次 push 代码后就可以实时看到绿点了")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);