(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{374:function(t,s,a){t.exports=a.p+"assets/img/vueDataStream.f048ccdd.png"},613:function(t,s,a){"use strict";a.r(s);var e=a(45),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue-面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-面试题"}},[t._v("#")]),t._v(" Vue 面试题")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#vue-cli-脚手架做了啥"}},[t._v("vue-cli 脚手架做了啥")])]),e("li",[e("a",{attrs:{href:"#vue-router-路由实现"}},[t._v("Vue Router 路由实现")]),e("ul",[e("li",[e("a",{attrs:{href:"#hashhistory"}},[t._v("hashHistory")])]),e("li",[e("a",{attrs:{href:"#html5history"}},[t._v("HTML5hisTory")])])])]),e("li",[e("a",{attrs:{href:"#vue-的父组件和子组件生命周期钩子函数执行顺序"}},[t._v("Vue 的父组件和子组件生命周期钩子函数执行顺序？")])]),e("li",[e("a",{attrs:{href:"#在哪个生命周期内调用异步请求"}},[t._v("在哪个生命周期内调用异步请求？")])]),e("li",[e("a",{attrs:{href:"#父组件可以监听到子组件的生命周期吗"}},[t._v("父组件可以监听到子组件的生命周期吗？")])]),e("li",[e("a",{attrs:{href:"#谈谈你对-keep-alive-的了解"}},[t._v("谈谈你对 keep-alive 的了解？")])]),e("li",[e("a",{attrs:{href:"#vue-是如何实现数据双向绑定的"}},[t._v("Vue 是如何实现数据双向绑定的？")])]),e("li",[e("a",{attrs:{href:"#vue-框架怎么实现对象和数组的监听"}},[t._v("Vue 框架怎么实现对象和数组的监听？")])]),e("li",[e("a",{attrs:{href:"#proxy-与-object-defineproperty-优劣对比"}},[t._v("Proxy 与 Object.defineProperty 优劣对比")])]),e("li",[e("a",{attrs:{href:"#vue-怎么用-vm-set-解决对象新增属性不能响应的问题"}},[t._v("Vue 怎么用 vm.\\$set() 解决对象新增属性不能响应的问题 ？")])]),e("li",[e("a",{attrs:{href:"#虚拟-dom-实现原理"}},[t._v("虚拟 DOM 实现原理")])]),e("li",[e("a",{attrs:{href:"#vue-中有什么作用"}},[t._v("vue 中有什么作用")])]),e("li",[e("a",{attrs:{href:"#你有对-vue-项目进行哪些优化"}},[t._v("你有对 Vue 项目进行哪些优化？")])]),e("li",[e("a",{attrs:{href:"#vue-双向数据绑定实现-用-object-defineproperty-实现的缺点-有什么场景是不能用它实现的。那么其他场景如何实现。不用-object-defineproperty-如何实现"}},[t._v("vue 双向数据绑定实现，用 Object.defineProperty()实现的缺点，有什么场景是不能用它实现的。那么其他场景如何实现。不用 Object.defineProperty()如何实现？")])]),e("li",[e("a",{attrs:{href:"#vuex-中为什么分为-mutations-和-actions-来执行同步和异步"}},[t._v("Vuex 中为什么分为 mutations 和 actions 来执行同步和异步")])]),e("li",[e("a",{attrs:{href:"#vue怎么监听深度嵌套对象的属性变化"}},[t._v("Vue怎么监听深度嵌套对象的属性变化")])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"vue-cli-脚手架做了啥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli-脚手架做了啥"}},[t._v("#")]),t._v(" vue-cli 脚手架做了啥")]),t._v(" "),e("p",[t._v("他里面有一个操作 叫 check version 你知道咋实现的么\n用 update-check 库 传入 package.json 对比线上仓库 判断是否需要更新")]),t._v(" "),e("h2",{attrs:{id:"vue-router-路由实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-路由实现"}},[t._v("#")]),t._v(" Vue Router 路由实现")]),t._v(" "),e("h4",{attrs:{id:"hashhistory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashhistory"}},[t._v("#")]),t._v(" hashHistory")]),t._v(" "),e("p",[t._v("两个方法：HashHistory.push() 和 HashHistory.replace()\n通过 onHashChange 监听变化")]),t._v(" "),e("h4",{attrs:{id:"html5history"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5history"}},[t._v("#")]),t._v(" HTML5hisTory")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看")]),t._v(" "),e("p",[t._v("back(), forward(), go()等方法，我们可以读取浏览器历史记录栈的信息\npushState(), replaceState() 这下不仅是读取了，还可以对浏览器历史记录栈进行修改\n在 HTML5History 的构造函数中监听 popState（window.onpopstate）")]),t._v(" "),e("p",[t._v("需要注意的是，存储当前路由的变量 this.app.current 非一般的变量，而是借用 Vue 的响应式定义的，所以当路由变化时只需要给这个 this.app.current 赋值，而 router-view 组件刚好引用到这个值，当其改变时所有的引用到的地方都会改变，则得到的要展示的组件也就响应式的变化了。")]),t._v(" "),e("p",[t._v("history 路由模式的实现主要基于存在下面几个特性：")]),t._v(" "),e("p",[t._v("pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；\n我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；\nhistory.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。 路由记录的数据是响应式的, 数据的变化会触发重新渲染")])]),t._v(" "),e("h2",{attrs:{id:"vue-的父组件和子组件生命周期钩子函数执行顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-的父组件和子组件生命周期钩子函数执行顺序"}},[t._v("#")]),t._v(" Vue 的父组件和子组件生命周期钩子函数执行顺序？")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看")]),t._v(" "),e("p",[t._v("Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：")]),t._v(" "),e("ul",[e("li",[t._v("加载渲染过程\n父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted")])]),t._v(" "),e("ul",[e("li",[t._v("子组件更新过程\n父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated")])]),t._v(" "),e("ul",[e("li",[t._v("父组件更新过程\n父 beforeUpdate -> 父 updated")])]),t._v(" "),e("ul",[e("li",[t._v("销毁过程\n父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed")])])]),t._v(" "),e("h2",{attrs:{id:"在哪个生命周期内调用异步请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在哪个生命周期内调用异步请求"}},[t._v("#")]),t._v(" 在哪个生命周期内调用异步请求？")]),t._v(" "),e("p",[t._v("可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：")]),t._v(" "),e("p",[t._v("能更快获取到服务端数据，减少页面  loading 时间；\nssr  不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；")]),t._v(" "),e("h2",{attrs:{id:"父组件可以监听到子组件的生命周期吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父组件可以监听到子组件的生命周期吗"}},[t._v("#")]),t._v(" 父组件可以监听到子组件的生命周期吗？")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看")]),t._v(" "),e("p",[t._v("比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Parent.vue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Child @mounted"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"doSomething"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Child.vue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mounted")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mounted"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  Parent.vue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Child @hook"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("mounted"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"doSomething"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Child"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'父组件监听到 mounted 钩子函数 ...'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  Child.vue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mounted")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'子组件触发 mounted 钩子函数 ...'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("// 以上输出顺序为：\n// 子组件触发 mounted 钩子函数 ...\n// 父组件监听到 mounted 钩子函数 ...")])]),t._v(" "),e("h2",{attrs:{id:"谈谈你对-keep-alive-的了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对-keep-alive-的了解"}},[t._v("#")]),t._v(" 谈谈你对 keep-alive 的了解？")]),t._v(" "),e("p",[t._v("keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：")]),t._v(" "),e("p",[t._v("一般结合路由和动态组件一起使用，用于缓存组件；\n提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；\n对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。")]),t._v(" "),e("h2",{attrs:{id:"vue-是如何实现数据双向绑定的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-是如何实现数据双向绑定的"}},[t._v("#")]),t._v(" Vue 是如何实现数据双向绑定的？")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("实现一个监听器 Observer : 对数据对象进行遍历, 包括子属性对象的属性, 利用 Object.defineProperty() 对象属性都加上 getter 和 setter. 这样的话, 给这个对象的某个赋值, 就会被 setter 监听到")])]),t._v(" "),e("li",[e("p",[t._v("实现一个解析器 Compile : 解析 Vue 的模板指令, 将模板中的变量都替换成数据, 然后初始化渲染页面视图, 并将每个指令对应的节点绑定更新函数, 添加监听数据的订阅者 Watcher, 一旦数据有变动, 收到通知, 调用更新函数进行数据更新")])]),t._v(" "),e("li",[e("p",[t._v("实现一个订阅者 Watcher : Watcher 订阅者是 Observer 和 Compile 之间通讯的桥梁, 主要的任务就是订阅 Observer 中数据值变化的消息, 当收到属性值变化的消息, 就会通知 Compile 对应的更新函数")])]),t._v(" "),e("li",[e("p",[t._v("实现一个订阅器 Dep: 订阅器采用订阅发布模式, 用来手机订阅者 Watcher, 对监听器 Observer 和 订阅者 Watcher 统一管理")])])]),t._v(" "),e("p",[e("img",{attrs:{src:a(374),alt:""}})])]),t._v(" "),e("h2",{attrs:{id:"vue-框架怎么实现对象和数组的监听"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-框架怎么实现对象和数组的监听"}},[t._v("#")]),t._v(" Vue 框架怎么实现对象和数组的监听？")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * Observe a list of Array items.\n   */")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeArray")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("items"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Array"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// observe 功能为监测数据的变化")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * 对属性进行递归遍历\n   */")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" childOb "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// observe 功能为监测数据的变化")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("p",[t._v("通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。")])]),t._v(" "),e("h2",{attrs:{id:"proxy-与-object-defineproperty-优劣对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proxy-与-object-defineproperty-优劣对比"}},[t._v("#")]),t._v(" Proxy 与 Object.defineProperty 优劣对比")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Proxy 的优势如下:")]),t._v(" "),e("p",[t._v("Proxy 可以直接监听对象而非属性；\nProxy 可以直接监听数组的变化；\nProxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；\nProxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；\nProxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；")])]),t._v(" "),e("li",[e("p",[t._v("Object.defineProperty 的优势如下:")]),t._v(" "),e("p",[t._v("兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。")])])])]),t._v(" "),e("h2",{attrs:{id:"vue-怎么用-vm-set-解决对象新增属性不能响应的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-怎么用-vm-set-解决对象新增属性不能响应的问题"}},[t._v("#")]),t._v(" Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？")]),t._v(" "),e("p",[t._v("我们阅读以上源码可知，vm.$set 的实现原理是：")]),t._v(" "),e("p",[t._v("如果目标是数组，直接使用数组的 splice 方法触发相应式；")]),t._v(" "),e("p",[t._v("如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）")]),t._v(" "),e("h2",{attrs:{id:"虚拟-dom-实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-实现原理"}},[t._v("#")]),t._v(" 虚拟 DOM 实现原理")]),t._v(" "),e("ol",[e("li",[t._v("用 Javascript 对象模拟真实的 Dom 树结构, 对真实 Dom 树进行抽象")]),t._v(" "),e("li",[t._v("diff 算法: 对新旧的模拟 Dom 进行对比, 找出差异")]),t._v(" "),e("li",[t._v("patch 算法: 将两个新旧 Dom 树的差异应用到真实的 Dom 树上")])]),t._v(" "),e("h2",{attrs:{id:"vue-中有什么作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-中有什么作用"}},[t._v("#")]),t._v(" vue 中有什么作用")]),t._v(" "),e("p",[t._v("vue 中有一些节点是重复节点, 也就是通过 v-for 指令循环生成的, key 是循环生成的 vnode 的唯一标记, 可以让我们的 diff 操作更快, 更便捷")]),t._v(" "),e("p",[t._v("更准确: 因为带了 key 就不会就地复用不做更新了, 在比较过程中, 如果 a 节点的 key === b 空节点的 key, 这种对比就可以避免就地复用的情况, 会更加准确的进行更新")]),t._v(" "),e("p",[t._v("更快: 利用 key 的唯一性生成 map 对象来获取对应节点, 比遍历方式更快")]),t._v(" "),e("h2",{attrs:{id:"你有对-vue-项目进行哪些优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#你有对-vue-项目进行哪些优化"}},[t._v("#")]),t._v(" 你有对 Vue 项目进行哪些优化？")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看")]),t._v(" "),e("p",[t._v("（1）代码层面的优化")]),t._v(" "),e("p",[t._v("v-if 和 v-show 区分使用场景\ncomputed 和 watch 区分使用场景\nv-for 遍历必须为 item 添加 key，且避免同时使用 v-if\n长列表性能优化\n事件的销毁\n图片资源懒加载\n路由懒加载\n第三方插件的按需引入\n优化无限列表性能\n服务端渲染 SSR or 预渲染")]),t._v(" "),e("p",[t._v("（2）Webpack 层面的优化")]),t._v(" "),e("p",[t._v("Webpack 对图片进行压缩\n减少 ES6 转为 ES5 的冗余代码\n提取公共代码\n模板预编译\n提取组件的 CSS\n优化 SourceMap\n构建结果输出分析\nVue 项目的编译优化")]),t._v(" "),e("p",[t._v("（3）基础的 Web 技术的优化")]),t._v(" "),e("p",[t._v("开启 gzip 压缩\n浏览器缓存\nCDN 的使用\n使用 Chrome Performance 查找性能瓶颈")])]),t._v(" "),e("h2",{attrs:{id:"vue-双向数据绑定实现-用-object-defineproperty-实现的缺点-有什么场景是不能用它实现的。那么其他场景如何实现。不用-object-defineproperty-如何实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-双向数据绑定实现-用-object-defineproperty-实现的缺点-有什么场景是不能用它实现的。那么其他场景如何实现。不用-object-defineproperty-如何实现"}},[t._v("#")]),t._v(" vue 双向数据绑定实现，用 Object.defineProperty()实现的缺点，有什么场景是不能用它实现的。那么其他场景如何实现。不用 Object.defineProperty()如何实现？")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看")]),t._v(" "),e("ol",[e("li",[t._v("object.defineproperty 无法监控到数组下标的变化，导致通过数组下标添加元素，无法实时响应")]),t._v(" "),e("li",[t._v("object.defineProperty 只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍历。Proxy 可以劫持整个对象，并返回一个新的对象")]),t._v(" "),e("li",[t._v("proxy 不仅可以代理对象，还可以代理数组，还可以代理动态增加的属性")])])]),t._v(" "),e("h2",{attrs:{id:"vuex-中为什么分为-mutations-和-actions-来执行同步和异步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex-中为什么分为-mutations-和-actions-来执行同步和异步"}},[t._v("#")]),t._v(" Vuex 中为什么分为 mutations 和 actions 来执行同步和异步")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.zhihu.com/question/48759748/answer/112823337",target:"_blank",rel:"noopener noreferrer"}},[t._v("作者解释"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("事实上在 vuex 里面 actions 只是一个架构性的概念，并不是必须的，说到底只是一个函数，你在里面想干嘛都可以，只要最后触发 mutation 就行。异步竞态怎么处理那是用户自己的事情。vuex 真正限制你的只有 mutation 必须是同步的这一点（在 redux 里面就好像 reducer 必须同步返回下一个状态一样）。同步的意义在于这样每一个 mutation 执行完成后都可以对应到一个新的状态（和 reducer 一样），这样 devtools 就可以打个 snapshot 存下来，然后就可以随便 time-travel 了。")]),t._v(" "),e("p",[t._v("其实就是做了代码隔离\n不非受控的代码集中到 action\nmutation 只做纯函数的状态改变\nmvvm 一般强调的就是直接面对 view 的那层不要做复杂的逻辑")])]),t._v(" "),e("h2",{attrs:{id:"vue怎么监听深度嵌套对象的属性变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue怎么监听深度嵌套对象的属性变化"}},[t._v("#")]),t._v(" Vue怎么监听深度嵌套对象的属性变化")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("watch"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"obj.onj.work.ss"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    deep"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'监听到对象的属性改变了'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);