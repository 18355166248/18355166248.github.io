(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{565:function(t,n,r){"use strict";r.r(n);var e=r(45),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"数组中的第k个最大元素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组中的第k个最大元素"}},[t._v("#")]),t._v(" 数组中的第K个最大元素")]),t._v(" "),r("p",[t._v("// 快速排序的思路, 每次取中间值, targetIndex为数组排序后所在的索引\n// 每次不需要考虑排序, 只需要知道中间值排序后应该在的索引\n// 用这个索引去跟targetIndex比对 如果相等就返回对应的数字\n// 如果索引比targetIndex大, 那么代表期望值在左侧队列\n// 反之 期望值在右侧队列, 递归查找\nfunction quickSort (arr, targetIndex, start) {\nif (arr.length <= 1) return arr[0];\nlet left = [];\nlet right = [];\nconst mid = Math.floor(arr.length / 2);\nconst midNum = arr.splice(mid, 1)[0];")]),t._v(" "),r("p",[t._v("for (let i = 0; i < arr.length; i++) {\nif (arr[i] > midNum) {\nright.push(arr[i]);\n} else {\nleft.push(arr[i]);\n}\n}")]),t._v(" "),r("p",[t._v("console.log(left.length, start)")]),t._v(" "),r("p",[t._v("if (left.length + start === targetIndex) {\nreturn midNum;\n} else if (left.length + start > targetIndex) {\nreturn quickSort(left, targetIndex, start);\n} else {\nreturn quickSort(right, targetIndex, left.length + start + 1);\n}\n}")]),t._v(" "),r("p",[t._v("var findKthLargest = function(nums, k) {\nreturn quickSort(nums, nums.length - k, 0);\n};")]),t._v(" "),r("p",[t._v("// console.log(findKthLargest([3, 6, 5, 4, 10, 8, 7, 2, 1], 2));\nconsole.log(findKthLargest([3, 6, 4, 10], 2));")])])}),[],!1,null,null,null);n.default=a.exports}}]);