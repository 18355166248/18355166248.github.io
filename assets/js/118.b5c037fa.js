(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{503:function(n,r,t){"use strict";t.r(r);var e=t(45),s=Object(e.a)({},(function(){var n=this,r=n.$createElement,t=n._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_90-子集2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_90-子集2"}},[n._v("#")]),n._v(" 90. 子集2")]),n._v(" "),t("p",[n._v("// 给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。\n// 解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。")]),n._v(" "),t("p",[n._v("// 示例 1：\n// 输入：nums = [1,2,2]\n// 输出：[[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]")]),n._v(" "),t("p",[n._v("// 示例 2：\n// 输入：nums = [0]\n// 输出：[[],[0]]")]),n._v(" "),t("p",[n._v("/* 解法1: 迭代 */\nvar subsetsWithDup = function(nums) {\nconst arr = [[]];\nlet prePrevvLen = arr.length;")]),n._v(" "),t("p",[n._v("for (let i = 0; i < nums.length; i++) {\nconst resultArr = [];\nconst length = arr.length; // 每次外层循环缓存上一次arr的长度, 用于复制数据")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("for (let j = 0; j < length; j++) {\n  // 这里是否添加数据是从上上次结果集的末尾开始遍历上次新加入的结果集, 将新元素一一加进去\n  // 这里需要注意的是 加入当前值和上一个值是相同的那么上一个值的j值的for循环其实在当前j循环\n  // 不应该再走一遍了 因为肯定重复了 所以需要规避掉\n  if (j < prePrevvLen && nums[i] === nums[i - 1]) continue;\n  resultArr.push(arr[j].concat([nums[i]]));\n}\n\nprePrevvLen = arr.length;\nconsole.log(i, arr);\narr.push(...resultArr);\n")])])]),t("p",[n._v("}")]),n._v(" "),t("p",[n._v("console.log(JSON.stringify(arr));\n};")]),n._v(" "),t("p",[n._v("const arr = [1, 2, 2];\nconsole.log(subsetsWithDup(arr));")])])}),[],!1,null,null,null);r.default=s.exports}}]);