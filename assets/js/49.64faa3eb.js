(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{433:function(n,t,e){"use strict";e.r(t);var s=e(45),a=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_128-最长连续序列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_128-最长连续序列"}},[n._v("#")]),n._v(" 128. 最长连续序列")]),n._v(" "),e("p",[n._v("// 给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。\n// 进阶：你可以设计并实现时间复杂度为 O(n) 的解决方案吗？\nvar longestConsecutive = function(nums) {\nconst set = new Set();\nlet maxLength = 0;")]),n._v(" "),e("p",[n._v("for (const num of nums) {\nset.add(num);\n}")]),n._v(" "),e("p",[n._v("for (const s of set) {\nif (!set.has(s - 1)) {\nlet num = s,\ncurlenth = 1;")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("  while (set.has(num + 1)) {\n    curlenth++;\n    num++;\n  }\n\n  maxLength = Math.max(maxLength, curlenth);\n}\n")])])]),e("p",[n._v("}")]),n._v(" "),e("p",[n._v("return maxLength;\n};\nconsole.log(longestConsecutive([100, 4, 200, 1, 3, 2]));")])])}),[],!1,null,null,null);t.default=a.exports}}]);