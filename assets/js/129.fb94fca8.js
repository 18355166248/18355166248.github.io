(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{515:function(e,n,l){"use strict";l.r(n);var t=l(45),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,l=e._self._c||n;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"promise"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[e._v("#")]),e._v(" Promise")]),e._v(" "),l("p",[e._v('function Promise(fn) {\nlet state = "pending";\nlet value;\nconst callbacks = [];')]),e._v(" "),l("p",[e._v('// onFulfilled: Function 状态变成fulfilled后的回调函数\nthis.then = function(onFulfilled) {\nreturn new Promise((resolve) => {\nconsole.log("then", onFulfilled);\nhandle({\nonFulfilled,\nresolve,\n});\n});\n};')]),e._v(" "),l("p",[e._v('// 这里会吧state改成fulfilled, 将val缓存再value, 执行then里面的回调函数\nfunction resolve(val) {\nconst fn = () => {\nif (state !== "pending") return;')]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",[l("code",[e._v('  state = "fulfilled";\n  value = val;\n  handleCb();\n};\n\nsetTimeout(fn, 0);\n')])])]),l("p",[e._v("}")]),e._v(" "),l("p",[e._v("function handleCb() {\nwhile (callbacks.length) {\nconst fulfilledFn = callbacks.shift();")]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",[l("code",[e._v("  handle(fulfilledFn);\n}\n")])])]),l("p",[e._v("}")]),e._v(" "),l("p",[e._v('function handle(callback) {\nif (state === "pending") {\ncallbacks.push(callback);\nreturn;\n}')]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",[l("code",[e._v('if (state === "fulfilled") {\n  if (!callback.onFulfilled) {\n    callback.resolve(value);\n    return;\n  }\n  const res = callback.onFulfilled(value);\n  callback.resolve(res);\n}\n')])])]),l("p",[e._v("}")]),e._v(" "),l("p",[e._v("fn(resolve);\n}")]),e._v(" "),l("p",[e._v("const p = new Promise((resolve) => {\nconsole.log(4444);")]),e._v(" "),l("p",[e._v("resolve(111);\n});")]),e._v(" "),l("p",[e._v('p.then((res) => {\nconsole.log(res);\n})\n.then()\n.then((res) => {\nconsole.log("二次then", res);\n});')]),e._v(" "),l("p",[e._v("// 回顾")]),e._v(" "),l("p",[e._v("// 1. 初始化Promise, 设置state变量, 用于控制Promise的三种状态, 不可逆. pending fulfilled rejected  并初始化Promise回调函数里面改变状态传输的值value, 再缓存then里面回调函数的缓存函数")]),e._v(" "),l("p",[e._v("// 2. 执行then的回调函数, 并传入一个resolve方法")]),e._v(" "),l("p",[e._v("// 3. resolve方法是为了改变state从pending到fulfilled的, 他的执行需要再setTimeout中, 目的是为了让所有的then内部的回调函数缓存再callbacks数组内")]),e._v(" "),l("p",[e._v("// 4. 执行resolve方法, 缓存val的值, 改变了state的值为fulfilled, 执行缓存回调函数内部的函数")]),e._v(" "),l("p",[e._v("// 5. 在执行then回调函数的时候, 需要做边界处理, 如果then的回调函数不传的话, 那么默认执行resolve并将上一个value的缓存值传下去")])])}),[],!1,null,null,null);n.default=s.exports}}]);