(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{447:function(n,e,t){"use strict";t.r(e);var l=t(45),s=Object(l.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_23-合并k个升序链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-合并k个升序链表"}},[n._v("#")]),n._v(" 23. 合并K个升序链表")]),n._v(" "),t("p",[n._v("// 给你一个链表数组，每个链表都已经按升序排列。")]),n._v(" "),t("p",[n._v("const e = require('express')")]),n._v(" "),t("p",[n._v("// 请你将所有链表合并到一个升序链表中，返回合并后的链表\nvar mergeKLists = function(lists) {\nlet prevLine = null")]),n._v(" "),t("p",[n._v("for (let i = 0; i < lists.length; i++) {\nprevLine = merge2List(prevLine, lists[i])\n}")]),n._v(" "),t("p",[n._v("return prevLine\n}")]),n._v(" "),t("p",[n._v("function merge2List(l1, l2) {\nconst headLine = {}\nlet head = headLine\nwhile (l1 && l2) {\nif (l1.val < l2.val) {\nhead.next = l1\nl1 = l1.next\n} else {\nhead.next = l2\nl2 = l2.next\n}\nhead = head.next\n}")]),n._v(" "),t("p",[n._v("head.next = l1 === null ? l2 : l1")]),n._v(" "),t("p",[n._v("return headLine.next\n}")]),n._v(" "),t("p",[n._v("const lists = [\n{ val: 1, next: { val: 4, next: { val: 5, next: null } } },\n{ val: 1, next: { val: 3, next: { val: 4, next: null } } },\n{ val: 2, next: { val: 6, next: null } },\n]")]),n._v(" "),t("p",[n._v("console.log(JSON.stringify(mergeKLists(lists)))")])])}),[],!1,null,null,null);e.default=s.exports}}]);